;; released by Akira Hashizume,
;; Hirohsima Univ. Hospital
;; on 2025-October-20th

(defun 16create()
  (let ((16form)(btns)(16menu)(btn)(n)(x 50)(y 50))
    (setq 16form (make-form-dialog *application-shell* "*16*"
      :autoUnmanage 0 :resize 1))
    (manage 16form)
    (setq 16btn (make-button 16form "16btn"
      :topAttachment XmATTACH_FORM :leftAttachment XmATTACH_FORM
      :labelString (XmString "reset")))
    (manage 16btn)
    (set-lisp-callback 16btn "activateCallback" '(16init))
    (setq btn0  (make-button 16form "btn0"))
    (setq btn1  (make-button 16form "btn1"))
    (setq btn2  (make-button 16form "btn2"))
    (setq btn3  (make-button 16form "btn3"))
    (setq btn4  (make-button 16form "btn4"))
    (setq btn5  (make-button 16form "btn5"))
    (setq btn6  (make-button 16form "btn6"))
    (setq btn7  (make-button 16form "btn7"))
    (setq btn8  (make-button 16form "btn8"))
    (setq btn9  (make-button 16form "btn9"))
    (setq btn10 (make-button 16form "btn10"))
    (setq btn11 (make-button 16form "btn11"))
    (setq btn12 (make-button 16form "btn12"))
    (setq btn13 (make-button 16form "btn13"))
    (setq btn14 (make-button 16form "btn14"))
    (setq btn15 (make-button 16form "btn15"))
    (setq btns (list btn0 btn1 btn2 btn3 btn4 btn5 btn6 btn7 
                btn8 btn9 btn10 btn11 btn12 btn13 btn14 btn15))
    (dotimes (n (length btns))
      (setq btn (nth n btns))
      ;(set-lisp-callback btn "activateCallback" (16click n))
      (set-values btn
        :labelString (XmString (format nil "~s" (+ n 1)))
        :topAttachment XmATTACH_WIDGET
        :topWidget 16btn
        :topOffset (* (div n 4) y)
        :leftAttachment XmATTACH_FORM
        :leftOffset (* (mod n 4) x)
        :width x :height y)))
    (dolist (n (list btn0 btn1 btn2 btn3 btn4 btn5 btn6 btn7
                btn8 btn9 btn10 btn11 btn12 btn13 btn14 btn15))
      (manage n))
  (set-lisp-callback btn0 "activateCallback" '(16click 0))
  (set-lisp-callback btn1 "activateCallback" '(16click 1))
  (set-lisp-callback btn2 "activateCallback" '(16click 2))
  (set-lisp-callback btn3 "activateCallback" '(16click 3))
  (set-lisp-callback btn4 "activateCallback" '(16click 4))
  (set-lisp-callback btn5 "activateCallback" '(16click 5))
  (set-lisp-callback btn6 "activateCallback" '(16click 6))
  (set-lisp-callback btn7 "activateCallback" '(16click 7))
  (set-lisp-callback btn8 "activateCallback" '(16click 8))
  (set-lisp-callback btn9 "activateCallback" '(16click 9))
  (set-lisp-callback btn10 "activateCallback" '(16click 10))
  (set-lisp-callback btn11 "activateCallback" '(16click 11))
  (set-lisp-callback btn12 "activateCallback" '(16click 12))
  (set-lisp-callback btn13 "activateCallback" '(16click 13))
  (set-lisp-callback btn14 "activateCallback" '(16click 14))
  (set-lisp-callback btn15 "activateCallback" '(16click 15))
))

(defun 16click(pos)
  (setq *16* (16move pos))
  (16show)
)

(defun 16init()
  (let ((n))
    (setq *16* #m((1 2 3 4)(5 6 7 8)(9 10 11 12)(13 14 15 16)))
    (dotimes (n 100)
      (setq *16* (16move (mod (rand) 16))))
    (16show)
))

(defun 16move(pos)
  ;for check (print-array (16move 3))
  (let ((n)(val)(vx)(vy)(x)(y)(R)(V)(z0)(z1)(z2)(z3))
    (setq R *16*)
    (setq val (16where16))
    (setq vx (first val) vy (second val))
    (setq x (mod pos 4) y (div pos 4))
    ;(print (list x y vx vy))
    (if (= vy y)(progn
      (setq z0 (transpose (row 0 R)))
      (setq z1 (transpose (row 1 R)))
      (setq z2 (transpose (row 2 R)))
      (setq z3 (transpose (row 3 R)))
      (setq z  (transpose (row vy R)))
      (setq z (16movecore z x vx))
      (case vy
        (0 (setq z0 z))
        (1 (setq z1 z))
        (2 (setq z2 z))
        (3 (setq z3 z))
      )
      (setq R (transpose (mat-append z0 z1 z2 z3)))
      (return R)))
    (if (= vx x)(progn
      (setq z0 (column 0 R))
      (setq z1 (column 1 R))
      (setq z2 (column 2 R))
      (setq z3 (column 3 R))
      (setq z (column vx R))
      (setq z (16movecore z y vy))   
      (case vx
        (0 (setq z0 z))
        (1 (setq z1 z))
        (2 (setq z2 z))
        (3 (setq z3 z))
      )
      (setq R (mat-append z0 z1 z2 z3))
      (return R)))
   (return R)     
))

(defun 16movecore(z x vx);vx 16 x other
  ;usage (16movecore #m((13 14 15 16)) 3 0)
  (let ((check)(n0)(n1)(n2)(n3)(nn))
    (setq check (array-dimension z 0))
    (setq n0 (vref z 0) n1 (vref z 1) n2 (vref z 2) n3 (vref z 3)) 
    (case vx
      (0 (case x
        (0 (setq z (matrix (list (list n0 n1 n2 n3)))))
        (1 (setq z (matrix (list (list n1 n0 n2 n3)))))
        (2 (setq z (matrix (list (list n1 n2 n0 n3)))))
        (3 (setq z (matrix (list (list n1 n2 n3 n0)))))))
      (1 (case x
        (0 (setq z (matrix (list (list n1 n0 n2 n3)))))
        (1 (setq z (matrix (list (list n0 n1 n2 n3)))))
        (2 (setq z (matrix (list (list n0 n2 n1 n3)))))
        (3 (setq z (matrix (list (list n0 n2 n3 n1)))))))
      (2 (case x
        (0 (setq z (matrix (list (list n2 n0 n1 n3)))))
        (1 (setq z (matrix (list (list n0 n2 n1 n3)))))
        (2 (setq z (matrix (list (list n0 n1 n2 n3)))))
        (3 (setq z (matrix (list (list n0 n1 n3 n2)))))))
      (3 (case x
        (0 (setq z (matrix (list (list n3 n0 n1 n2)))))
        (1 (setq z (matrix (list (list n0 n3 n1 n2)))))
        (2 (setq z (matrix (list (list n0 n1 n3 n2)))))
        (3 (setq z (matrix (list (list n0 n1 n2 n3))))))))
    (if (/= check 1)(setq z (transpose z)))
    (return z)
))

(defun 16rgb(r g b)
  (+ (* (+ (* r 256) g) 256) b)
)


(defun 16show()
  (let ((x)(xx nil)(n)(btns)(btn)(val))
    (setq x (mat-append (row 0 *16*)(row 1 *16*)(row 2 *16*)(row 3 *16*)))
    (dotimes (n 16)
      (setq xx (append xx (list (round (vref x n))))))
    (setq btns (list btn0 btn1 btn2 btn3 btn4 btn5 btn6 btn7
                btn8 btn9 btn10 btn11 btn12 btn13 btn14 btn15))
    (dotimes (n 16)
      (setq btn (nth n btns))
      (unmanage btn)
      (setq val (round (vref x n)))
      (set-values btn :labelString (XmString (format nil "~s" val)))
      (set-values btn :width 50 :height 50)
      (if (< val 5)(set-values btn :background (16rgb 128 128 255))
        (if (< val 9)(set-values btn :background (16rgb 128 255 128))
          (if (< val 13)(set-values btn :background (16rgb 192 192 128))
                        (set-values btn :background (16rgb 255 128 128)))))
      (if (= val 16)(unmanage btn)(manage btn)))
    (if (equal xx (list 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16))
      (info "Congratulation!"))
))

(defun 16where16()
  (let ((n)(val)(x)(y))
    (catch 'exit
      (dotimes (y 4)
        (setq val (row y *16*))
        (dotimes (x 4)
          (if (= 16 (vref val x))  
            (throw 'exit (setq n (list x y)))))))
    (return n)
))

(16create)
(16init)
